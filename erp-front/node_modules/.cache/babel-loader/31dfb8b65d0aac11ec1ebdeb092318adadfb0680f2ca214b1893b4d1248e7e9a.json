{"ast":null,"code":"import ApiRoutes from \"../config/ApiRoutes\";\nexport const RegisterService = {\n  register: function (name, surname, email, username, password) {\n    return new Promise((resolve, reject) => {\n      let requestBody = {\n        Name: name,\n        Surname: surname,\n        Email: email,\n        Username: username,\n        Password: password\n      };\n      fetch(ApiRoutes.REGISTER, {\n        headers: {\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        method: \"POST\",\n        body: JSON.stringify(requestBody)\n      }).then(response => {\n        if (response.status == 400) {\n          reject(\"Morate popuniti sva polja!\");\n        }\n        if (response.status == 409) {\n          reject(\"Korisnik sa istom Email adresom vec postoji\");\n        }\n        return response.json();\n      }).then(data => resolve(data)).catch(error => reject(error));\n    });\n  }\n};\nexport default RegisterService;","map":{"version":3,"names":["ApiRoutes","RegisterService","register","name","surname","email","username","password","Promise","resolve","reject","requestBody","Name","Surname","Email","Username","Password","fetch","REGISTER","headers","method","body","JSON","stringify","then","response","status","json","data","catch","error"],"sources":["C:/Users/mmaksimovic/Desktop/ERP/it102019erp/erp-front/src/services/RegisterService.js"],"sourcesContent":["import ApiRoutes from \"../config/ApiRoutes\"\r\n\r\nexport const RegisterService = {\r\n    register: function(name, surname, email, username, password) {\r\n        return new Promise((resolve, reject) => {\r\n            let requestBody = {\r\n                Name: name, \r\n                Surname: surname,\r\n                Email: email,\r\n                Username: username,\r\n                Password: password\r\n              }\r\n\r\n            fetch(ApiRoutes.REGISTER, {\r\n                headers: {\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                method: \"POST\",\r\n                body: JSON.stringify(requestBody)\r\n            })\r\n            .then(response => {\r\n                if (response.status == 400) {\r\n                    reject(\"Morate popuniti sva polja!\")\r\n                }\r\n\r\n                if (response.status == 409) {\r\n                    reject(\"Korisnik sa istom Email adresom vec postoji\")\r\n                }\r\n                return response.json()\r\n            })\r\n            .then(data => resolve(data))\r\n            .catch(error => reject(error))\r\n\r\n        })\r\n    }\r\n}\r\n\r\nexport default RegisterService"],"mappings":"AAAA,OAAOA,SAAS,MAAM,qBAAqB;AAE3C,OAAO,MAAMC,eAAe,GAAG;EAC3BC,QAAQ,EAAE,SAAAA,CAASC,IAAI,EAAEC,OAAO,EAAEC,KAAK,EAAEC,QAAQ,EAAEC,QAAQ,EAAE;IACzD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC,IAAIC,WAAW,GAAG;QACdC,IAAI,EAAET,IAAI;QACVU,OAAO,EAAET,OAAO;QAChBU,KAAK,EAAET,KAAK;QACZU,QAAQ,EAAET,QAAQ;QAClBU,QAAQ,EAAET;MACZ,CAAC;MAEHU,KAAK,CAACjB,SAAS,CAACkB,QAAQ,EAAE;QACtBC,OAAO,EAAE;UACL,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QACpB,CAAC;QACDC,MAAM,EAAE,MAAM;QACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACZ,WAAW;MACpC,CAAC,CAAC,CACDa,IAAI,CAACC,QAAQ,IAAI;QACd,IAAIA,QAAQ,CAACC,MAAM,IAAI,GAAG,EAAE;UACxBhB,MAAM,CAAC,4BAA4B,CAAC;QACxC;QAEA,IAAIe,QAAQ,CAACC,MAAM,IAAI,GAAG,EAAE;UACxBhB,MAAM,CAAC,6CAA6C,CAAC;QACzD;QACA,OAAOe,QAAQ,CAACE,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDH,IAAI,CAACI,IAAI,IAAInB,OAAO,CAACmB,IAAI,CAAC,CAAC,CAC3BC,KAAK,CAACC,KAAK,IAAIpB,MAAM,CAACoB,KAAK,CAAC,CAAC;IAElC,CAAC,CAAC;EACN;AACJ,CAAC;AAED,eAAe7B,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}