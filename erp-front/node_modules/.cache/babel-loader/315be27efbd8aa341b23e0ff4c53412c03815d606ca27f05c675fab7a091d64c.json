{"ast":null,"code":"import ApiRoutes from \"../config/ApiRoutes\";\nexport const QuestionService = {\n  getQuestions: function () {\n    return new Promise((resolve, reject) => {\n      fetch(ApiRoutes.QUESTION, {\n        method: \"GET\"\n      }).then(response => {\n        return response.json();\n      }).then(data => resolve(data)).catch(error => reject(error));\n    });\n  },\n  getMessagesByQuestion: function (questionId) {\n    return new Promise((resolve, reject) => {\n      fetch(ApiRoutes.QUESTION + questionId + ApiRoutes.MESSAGE, {\n        method: \"GET\"\n      }).then(response => {\n        return response.json();\n      }).then(data => resolve(data)).catch(error => reject(error));\n    });\n  },\n  addQuestion: function (question) {\n    return new Promise((resolve, reject) => {\n      let requestBody = {\n        theme: question\n      };\n      let jwt = localStorage.getItem(\"ButikJWT\");\n      fetch(ApiRoutes.QUESTION, {\n        method: \"POST\",\n        headers: {\n          'Authorization': 'Bearer ' + jwt,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      }).then(response => {\n        window.location.reload();\n        return response.json();\n      }).then(data => resolve(data)).catch(error => reject(error));\n    });\n  },\n  deleteQuestion: function (questionId) {\n    return new Promise((resolve, reject) => {\n      let jwt = localStorage.getItem(\"ButikJWT\");\n      fetch(ApiRoutes.QUESTION + questionId, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': 'Bearer ' + jwt,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        window.location.reload();\n        return response.json();\n      }).then(data => resolve(data)).catch(error => reject(error));\n    });\n  },\n  deleteMessage: function (questionId, messageId) {\n    return new Promise((resolve, reject) => {\n      let jwt = localStorage.getItem(\"ButikJWT\");\n      fetch(ApiRoutes.QUESTION + questionId + ApiRoutes.MESSAGE + messageId, {\n        method: \"DELETE\",\n        headers: {\n          'Authorization': 'Bearer ' + jwt,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        return response.json();\n      }).then(data => resolve(data)).catch(error => reject(error));\n    });\n  },\n  addMessage: function (message, questionId) {\n    return new Promise((resolve, reject) => {\n      let requestBody = {\n        messageText: message\n      };\n      let jwt = localStorage.getItem(\"ButikJWT\");\n      fetch(ApiRoutes.QUESTION + questionId + ApiRoutes.MESSAGE, {\n        method: \"POST\",\n        headers: {\n          'Authorization': 'Bearer ' + jwt,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      }).then(response => {\n        return response.json();\n      }).then(data => resolve(data)).catch(error => reject(error));\n    });\n  },\n  updateMessage: function (questionId, messageId, message) {\n    return new Promise((resolve, reject) => {\n      let requestBody = {\n        messageText: message\n      };\n      let jwt = localStorage.getItem(\"ButikJWT\");\n      fetch(ApiRoutes.QUESTION + questionId + ApiRoutes.MESSAGE + messageId, {\n        method: \"PUT\",\n        headers: {\n          'Authorization': 'Bearer ' + jwt,\n          'Accept': 'application/json',\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(requestBody)\n      }).then(response => {\n        window.location.reload();\n        return response.json();\n      }).then(data => resolve(data)).catch(error => reject(error));\n    });\n  }\n};\nexport default QuestionService;","map":{"version":3,"names":["ApiRoutes","QuestionService","getQuestions","Promise","resolve","reject","fetch","QUESTION","method","then","response","json","data","catch","error","getMessagesByQuestion","questionId","MESSAGE","addQuestion","question","requestBody","theme","jwt","localStorage","getItem","headers","body","JSON","stringify","window","location","reload","deleteQuestion","deleteMessage","messageId","addMessage","message","messageText","updateMessage"],"sources":["C:/Users/mmaksimovic/Desktop/ERP/it102019erp/erp-front/src/services/QuestionService.js"],"sourcesContent":["import ApiRoutes from \"../config/ApiRoutes\"\r\n\r\nexport const QuestionService = {\r\n\r\n    getQuestions: function () {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(ApiRoutes.QUESTION, {\r\n                method: \"GET\",\r\n            })\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then(data => resolve(data))\r\n            .catch(error => reject(error))\r\n\r\n        })\r\n    },\r\n\r\n    getMessagesByQuestion: function (questionId) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(ApiRoutes.QUESTION + questionId + ApiRoutes.MESSAGE, {\r\n                method: \"GET\",\r\n            })\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then(data => resolve(data))\r\n            .catch(error => reject(error))\r\n\r\n        })\r\n    },\r\n\r\n    addQuestion: function(question) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let requestBody = {\r\n                theme: question\r\n            }\r\n\r\n            let jwt = localStorage.getItem(\"ButikJWT\");\r\n            fetch(ApiRoutes.QUESTION, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + jwt,\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(requestBody)\r\n            })\r\n            .then(response => {\r\n                window.location.reload()\r\n                return response.json()\r\n            })\r\n            .then(data => resolve(data))\r\n            .catch(error => reject(error))\r\n        })\r\n    },  \r\n\r\n    deleteQuestion: function (questionId) {\r\n        return new Promise((resolve, reject) => {\r\n            let jwt = localStorage.getItem(\"ButikJWT\");\r\n            fetch(ApiRoutes.QUESTION + questionId, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + jwt,\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(response => {\r\n                window.location.reload()\r\n                return response.json()\r\n            })\r\n            .then(data => resolve(data))\r\n            .catch(error => reject(error))\r\n        })\r\n    },\r\n\r\n    deleteMessage: function (questionId, messageId) {\r\n\r\n        return new Promise((resolve, reject) => {\r\n            let jwt = localStorage.getItem(\"ButikJWT\");\r\n            fetch(ApiRoutes.QUESTION + questionId + ApiRoutes.MESSAGE + messageId, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + jwt,\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                }\r\n            })\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then(data => resolve(data))\r\n            .catch(error => reject(error))\r\n        })\r\n    },\r\n\r\n    addMessage: function (message, questionId) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let requestBody = {\r\n                messageText: message\r\n            }\r\n\r\n            let jwt = localStorage.getItem(\"ButikJWT\");\r\n            fetch(ApiRoutes.QUESTION + questionId + ApiRoutes.MESSAGE, {\r\n                method: \"POST\",\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + jwt,\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(requestBody)\r\n            })\r\n            .then(response => {\r\n                return response.json()\r\n            })\r\n            .then(data => resolve(data))\r\n            .catch(error => reject(error))\r\n        })\r\n    },\r\n\r\n    updateMessage: function (questionId, messageId, message) {\r\n        return new Promise((resolve, reject) => {\r\n\r\n            let requestBody = {\r\n                messageText: message\r\n            }\r\n\r\n            let jwt = localStorage.getItem(\"ButikJWT\");\r\n            fetch(ApiRoutes.QUESTION + questionId + ApiRoutes.MESSAGE + messageId, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    'Authorization': 'Bearer ' + jwt,\r\n                    'Accept': 'application/json',\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(requestBody)\r\n            })\r\n            .then(response => {\r\n                window.location.reload()\r\n                return response.json()\r\n            })\r\n            .then(data => resolve(data))\r\n            .catch(error => reject(error))\r\n        })\r\n    }\r\n}\r\nexport default QuestionService"],"mappings":"AAAA,OAAOA,SAAS,MAAM,qBAAqB;AAE3C,OAAO,MAAMC,eAAe,GAAG;EAE3BC,YAAY,EAAE,SAAAA,CAAA,EAAY;IACtB,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpCC,KAAK,CAACN,SAAS,CAACO,QAAQ,EAAE;QACtBC,MAAM,EAAE;MACZ,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAI;QACd,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDF,IAAI,CAACG,IAAI,IAAIR,OAAO,CAACQ,IAAI,CAAC,CAAC,CAC3BC,KAAK,CAACC,KAAK,IAAIT,MAAM,CAACS,KAAK,CAAC,CAAC;IAElC,CAAC,CAAC;EACN,CAAC;EAEDC,qBAAqB,EAAE,SAAAA,CAAUC,UAAU,EAAE;IACzC,OAAO,IAAIb,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpCC,KAAK,CAACN,SAAS,CAACO,QAAQ,GAAGS,UAAU,GAAGhB,SAAS,CAACiB,OAAO,EAAE;QACvDT,MAAM,EAAE;MACZ,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAI;QACd,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDF,IAAI,CAACG,IAAI,IAAIR,OAAO,CAACQ,IAAI,CAAC,CAAC,CAC3BC,KAAK,CAACC,KAAK,IAAIT,MAAM,CAACS,KAAK,CAAC,CAAC;IAElC,CAAC,CAAC;EACN,CAAC;EAEDI,WAAW,EAAE,SAAAA,CAASC,QAAQ,EAAE;IAC5B,OAAO,IAAIhB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAEpC,IAAIe,WAAW,GAAG;QACdC,KAAK,EAAEF;MACX,CAAC;MAED,IAAIG,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC1ClB,KAAK,CAACN,SAAS,CAACO,QAAQ,EAAE;QACtBC,MAAM,EAAE,MAAM;QACdiB,OAAO,EAAE;UACL,eAAe,EAAE,SAAS,GAAGH,GAAG;UAChC,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QACpB,CAAC;QACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;MACpC,CAAC,CAAC,CACDX,IAAI,CAACC,QAAQ,IAAI;QACdmB,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;QACxB,OAAOrB,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDF,IAAI,CAACG,IAAI,IAAIR,OAAO,CAACQ,IAAI,CAAC,CAAC,CAC3BC,KAAK,CAACC,KAAK,IAAIT,MAAM,CAACS,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC;EACN,CAAC;EAEDkB,cAAc,EAAE,SAAAA,CAAUhB,UAAU,EAAE;IAClC,OAAO,IAAIb,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC,IAAIiB,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC1ClB,KAAK,CAACN,SAAS,CAACO,QAAQ,GAAGS,UAAU,EAAE;QACnCR,MAAM,EAAE,QAAQ;QAChBiB,OAAO,EAAE;UACL,eAAe,EAAE,SAAS,GAAGH,GAAG;UAChC,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC,CACDb,IAAI,CAACC,QAAQ,IAAI;QACdmB,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;QACxB,OAAOrB,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDF,IAAI,CAACG,IAAI,IAAIR,OAAO,CAACQ,IAAI,CAAC,CAAC,CAC3BC,KAAK,CAACC,KAAK,IAAIT,MAAM,CAACS,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC;EACN,CAAC;EAEDmB,aAAa,EAAE,SAAAA,CAAUjB,UAAU,EAAEkB,SAAS,EAAE;IAE5C,OAAO,IAAI/B,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACpC,IAAIiB,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC1ClB,KAAK,CAACN,SAAS,CAACO,QAAQ,GAAGS,UAAU,GAAGhB,SAAS,CAACiB,OAAO,GAAGiB,SAAS,EAAE;QACnE1B,MAAM,EAAE,QAAQ;QAChBiB,OAAO,EAAE;UACL,eAAe,EAAE,SAAS,GAAGH,GAAG;UAChC,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QACpB;MACJ,CAAC,CAAC,CACDb,IAAI,CAACC,QAAQ,IAAI;QACd,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDF,IAAI,CAACG,IAAI,IAAIR,OAAO,CAACQ,IAAI,CAAC,CAAC,CAC3BC,KAAK,CAACC,KAAK,IAAIT,MAAM,CAACS,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC;EACN,CAAC;EAEDqB,UAAU,EAAE,SAAAA,CAAUC,OAAO,EAAEpB,UAAU,EAAE;IACvC,OAAO,IAAIb,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAEpC,IAAIe,WAAW,GAAG;QACdiB,WAAW,EAAED;MACjB,CAAC;MAED,IAAId,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC1ClB,KAAK,CAACN,SAAS,CAACO,QAAQ,GAAGS,UAAU,GAAGhB,SAAS,CAACiB,OAAO,EAAE;QACvDT,MAAM,EAAE,MAAM;QACdiB,OAAO,EAAE;UACL,eAAe,EAAE,SAAS,GAAGH,GAAG;UAChC,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QACpB,CAAC;QACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;MACpC,CAAC,CAAC,CACDX,IAAI,CAACC,QAAQ,IAAI;QACd,OAAOA,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDF,IAAI,CAACG,IAAI,IAAIR,OAAO,CAACQ,IAAI,CAAC,CAAC,CAC3BC,KAAK,CAACC,KAAK,IAAIT,MAAM,CAACS,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC;EACN,CAAC;EAEDwB,aAAa,EAAE,SAAAA,CAAUtB,UAAU,EAAEkB,SAAS,EAAEE,OAAO,EAAE;IACrD,OAAO,IAAIjC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MAEpC,IAAIe,WAAW,GAAG;QACdiB,WAAW,EAAED;MACjB,CAAC;MAED,IAAId,GAAG,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC1ClB,KAAK,CAACN,SAAS,CAACO,QAAQ,GAAGS,UAAU,GAAGhB,SAAS,CAACiB,OAAO,GAAGiB,SAAS,EAAE;QACnE1B,MAAM,EAAE,KAAK;QACbiB,OAAO,EAAE;UACL,eAAe,EAAE,SAAS,GAAGH,GAAG;UAChC,QAAQ,EAAE,kBAAkB;UAC5B,cAAc,EAAE;QACpB,CAAC;QACDI,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,WAAW;MACpC,CAAC,CAAC,CACDX,IAAI,CAACC,QAAQ,IAAI;QACdmB,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;QACxB,OAAOrB,QAAQ,CAACC,IAAI,CAAC,CAAC;MAC1B,CAAC,CAAC,CACDF,IAAI,CAACG,IAAI,IAAIR,OAAO,CAACQ,IAAI,CAAC,CAAC,CAC3BC,KAAK,CAACC,KAAK,IAAIT,MAAM,CAACS,KAAK,CAAC,CAAC;IAClC,CAAC,CAAC;EACN;AACJ,CAAC;AACD,eAAeb,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}